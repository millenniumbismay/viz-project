{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1m7DxRxhQ-AynxE-V6VqLcFOk77vGBGln","authorship_tag":"ABX9TyM7fb3cv41xEnBRUj9t60AF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mtLc_ePzUn0v","executionInfo":{"status":"ok","timestamp":1700786299873,"user_tz":360,"elapsed":806,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"a8bd99bc-7665-4c9e-c3bc-928715fb4ab4"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/Shareddrives/DV Project/Data_Cleaning\n"," data\t\t\t\t\t  h1b.ipynb   PERM.ipynb\n","'Data Standardizing and Cleaning.ipynb'   NIV.ipynb   Untitled0.ipynb\n"]}],"source":["%cd drive/Shareddrives/DV\\ Project/Data_Cleaning/\n","!ls"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"id":"UXyjA-PKUsdv","executionInfo":{"status":"ok","timestamp":1700786301714,"user_tz":360,"elapsed":882,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["## LCA Data"],"metadata":{"id":"v3OVU8FVLb9p"}},{"cell_type":"code","source":["soc_code_dict = {\n","    '11-2000': 'Professional and business services',\n","    '11-3030': 'Finance, insurance, real estate, rental, and leasing',\n","    '11-9140': 'Real estate and rental and leasing',\n","    '13-1000': 'Professional and business services',\n","    '13-2000': 'Finance, insurance, real estate, rental, and leasing',\n","    '15-0000': 'Professional and business services',\n","    '17-0000': 'Professional and business services',\n","    '19-0000': 'Professional and business services',\n","    '21-0000': 'Educational services, health care, and social assistance',\n","    '23-0000': 'Professional and business services',\n","    '25-0000': 'Educational services, health care, and social assistance',\n","    '27-1000': 'Arts, entertainment, recreation, accommodation, and food services',\n","    '27-2000': 'Arts, entertainment, recreation, accommodation, and food services',\n","    '27-3000': 'Information',\n","    '27-4000': 'Information',\n","    '29-0000': 'Educational services, health care, and social assistance',\n","    '31-0000': 'Educational services, health care, and social assistance',\n","    '33-0000': 'Government',\n","    '35-0000': 'Arts, entertainment, recreation, accommodation, and food services',\n","    '37-0000': 'Utilities',\n","    '39-3000': 'Arts, entertainment, recreation, accommodation, and food services',\n","    '41-3020': 'Finance, insurance, real estate, rental, and leasing',\n","    '41-3030': 'Finance, insurance, real estate, rental, and leasing',\n","    '41-4000': 'Wholesale and Retail Trade',\n","    '41-9020': 'Real estate and rental and leasing',\n","    '43-0000': 'Government',\n","    '43-9020': 'Information',\n","    '43-9040': 'Finance, insurance, real estate, rental, and leasing',\n","    '45-0000': 'Agriculture, forestry, fishing, and hunting',\n","    '47-1000': 'Construction',\n","    '47-2000': 'Construction',\n","    '47-3000': 'Construction',\n","    '47-4000': 'Construction',\n","    '47-5000': 'Mining',\n","    '49-0000': 'Manufacturing',\n","    '51-0000': 'Manufacturing',\n","    '53-0000': 'Transportation and Warehousing',\n","}"],"metadata":{"id":"3eYC_LJSx7Zn","executionInfo":{"status":"ok","timestamp":1700786303192,"user_tz":360,"elapsed":206,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["h1b_data = './data/lca_data/clean_data/h1b_FY2010.csv'\n","h1b = pd.read_csv(h1b_data)\n","print(h1b.shape)\n","h1b.head()"],"metadata":{"id":"B5dIePsUUub9","colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"status":"ok","timestamp":1700786309644,"user_tz":360,"elapsed":2719,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"cc8f2903-9fa8-47fe-86ec-bc97abdefc5a"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["(262688, 7)\n"]},{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0 LCA_CASE_SOC_CODE WORK_LOCATION_STATE1      PW_1 PW_UNIT_1  \\\n","0          21        15-1051.00                   WA  82300.00      Year   \n","1          22        15-1071.00                   NJ  56056.00      Year   \n","2          26        13-1072.00                   NJ     22.24      Hour   \n","3          28        13-1199.99                   NY  44408.00      Year   \n","4          29        15-2041.00                   NC  55453.00      Year   \n","\n","   LCA_CASE_NAICS_CODE VISA_ClASS  \n","0             541511.0       H-1B  \n","1             541511.0       H-1B  \n","2             541511.0       H-1B  \n","3               5111.0       H-1B  \n","4             611300.0       H-1B  "],"text/html":["\n","  <div id=\"df-47700c92-4764-43c8-9bc0-84a6b8e2b1d3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>LCA_CASE_SOC_CODE</th>\n","      <th>WORK_LOCATION_STATE1</th>\n","      <th>PW_1</th>\n","      <th>PW_UNIT_1</th>\n","      <th>LCA_CASE_NAICS_CODE</th>\n","      <th>VISA_ClASS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>21</td>\n","      <td>15-1051.00</td>\n","      <td>WA</td>\n","      <td>82300.00</td>\n","      <td>Year</td>\n","      <td>541511.0</td>\n","      <td>H-1B</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>22</td>\n","      <td>15-1071.00</td>\n","      <td>NJ</td>\n","      <td>56056.00</td>\n","      <td>Year</td>\n","      <td>541511.0</td>\n","      <td>H-1B</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>26</td>\n","      <td>13-1072.00</td>\n","      <td>NJ</td>\n","      <td>22.24</td>\n","      <td>Hour</td>\n","      <td>541511.0</td>\n","      <td>H-1B</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>28</td>\n","      <td>13-1199.99</td>\n","      <td>NY</td>\n","      <td>44408.00</td>\n","      <td>Year</td>\n","      <td>5111.0</td>\n","      <td>H-1B</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>29</td>\n","      <td>15-2041.00</td>\n","      <td>NC</td>\n","      <td>55453.00</td>\n","      <td>Year</td>\n","      <td>611300.0</td>\n","      <td>H-1B</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47700c92-4764-43c8-9bc0-84a6b8e2b1d3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-47700c92-4764-43c8-9bc0-84a6b8e2b1d3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-47700c92-4764-43c8-9bc0-84a6b8e2b1d3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bc313eaf-9b4b-4168-b7db-799585bc7a18\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc313eaf-9b4b-4168-b7db-799585bc7a18')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bc313eaf-9b4b-4168-b7db-799585bc7a18 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["def getPay(pw, pw_unit):\n","  ### for h2b\n","  try:\n","    # pw = float(pw[1:])\n","    if pw_unit == 'Hour':\n","      return pw*40*52\n","    elif pw_unit == 'Month':\n","      return pw*12\n","    elif pw_unit == 'Week':\n","      return pw*52\n","    elif pw_unit == 'Bi-Weekly':\n","      return pw*26\n","    return pw\n","  except Exception as e:\n","    pass\n","  return 0\n","\n","socs = list(soc_code_dict.keys())\n","def getSector(soc_code):\n","  cur_code = 'Others'\n","  try:\n","    soc_code = str(soc_code).split('.')[0]\n","\n","    ### for H-2B\n","    # soc_code = soc_code[:2]+'-'+soc_code[2:]\n","\n","    if soc_code in soc_code_dict:\n","      return soc_code_dict[soc_code]\n","    else:\n","      for soc in socs:\n","        for i in range(len(soc)):\n","          if soc[i] != soc_code[i]:\n","            break\n","        if soc[i] == '0':\n","          cur_code = soc_code_dict[soc]\n","  except Exception as e:\n","    pass\n","  return cur_code\n","\n","year = 2010\n","print('*'*50)\n","h1b_data_path = './data/lca_data/clean_data/h1b_FY' + str(year) + '.csv'\n","print(h1b_data_path)\n","h1b = pd.read_csv(h1b_data_path)\n","\n","### for H-1A 2010 - 2013\n","# h1b = h1b.drop(['SOC_CODE', 'NAICS_CODE'], axis = 1)\n","\n","print(h1b.shape)\n","h1b = h1b.dropna()\n","print(h1b.shape)\n","print(h1b.PW_UNIT_1.value_counts())\n","# h1b.head()\n","h1b['wage'] = h1b.apply(lambda x: getPay(x['PW_1'], x['PW_UNIT_1']), axis = 1)\n","h1b['sector'] = h1b.apply(lambda x: getSector(x['LCA_CASE_SOC_CODE']), axis = 1)\n","\n","### for H-2B\n","# h1b['VISA_CLASS'] = 'H-1B'\n","# h1b['sector'] = 'Agriculture, forestry, fishing, and hunting'\n","\n","h1b = h1b[['WORK_LOCATION_STATE1', 'VISA_ClASS', 'sector', 'wage']]\n","h1b.columns = ['State', 'Visa', 'Sector', 'Wage']\n","# h1b.head()\n","output_path = './data/final_cleaned/h1b_FY' + str(year) + '.csv'\n","h1b.to_csv(output_path, index = False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"veFqin0zw-hc","executionInfo":{"status":"ok","timestamp":1700787332939,"user_tz":360,"elapsed":13782,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"0019ce24-b395-4645-baa2-297e43b78fd4"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["**************************************************\n","./data/lca_data/clean_data/h1b_FY2010.csv\n","(262688, 7)\n","(262686, 7)\n","Year         231631\n","Hour          30101\n","Month           601\n","Week            264\n","Bi-Weekly        89\n","Name: PW_UNIT_1, dtype: int64\n"]}]},{"cell_type":"code","source":["h1b.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"-tXjNsCS6mDf","executionInfo":{"status":"ok","timestamp":1699567074998,"user_tz":360,"elapsed":102,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"89046fa7-6a48-4ff3-8793-cd22ec352a9b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   State  Visa        Sector  Wage\n","1     CO  H-2B     Utilities     0\n","3     TN  H-2B     Utilities     0\n","7     NC  H-2B     Utilities     0\n","10    TX  H-2B     Utilities     0\n","12    WI  H-2B  Construction     0"],"text/html":["\n","  <div id=\"df-1aaac76a-fefe-4210-915e-285a7a845c12\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>State</th>\n","      <th>Visa</th>\n","      <th>Sector</th>\n","      <th>Wage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>CO</td>\n","      <td>H-2B</td>\n","      <td>Utilities</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>TN</td>\n","      <td>H-2B</td>\n","      <td>Utilities</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>NC</td>\n","      <td>H-2B</td>\n","      <td>Utilities</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>TX</td>\n","      <td>H-2B</td>\n","      <td>Utilities</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>WI</td>\n","      <td>H-2B</td>\n","      <td>Construction</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1aaac76a-fefe-4210-915e-285a7a845c12')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1aaac76a-fefe-4210-915e-285a7a845c12 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1aaac76a-fefe-4210-915e-285a7a845c12');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a19a31fb-5df6-4d53-86df-908bd15b8744\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a19a31fb-5df6-4d53-86df-908bd15b8744')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a19a31fb-5df6-4d53-86df-908bd15b8744 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["## NIV Data"],"metadata":{"id":"nhk5HzWdLZqa"}},{"cell_type":"code","source":["niv_data_path = './data/niv_data/niv_FY10.csv'\n","niv = pd.read_csv(niv_data_path)\n","print(niv.shape)\n","niv.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"RJ_jeq0uyV37","executionInfo":{"status":"ok","timestamp":1699568983493,"user_tz":360,"elapsed":372,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"0cb67158-e07c-4af2-9d66-aabb302edcdc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(228, 18)\n"]},{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0 Fiscal Year 2010  E-1  E-2  E-3  E-3D  E-3R  H-1A  H-1B  H-1B1  \\\n","0           0           Africa  NaN  NaN  NaN   NaN   NaN   NaN   NaN    NaN   \n","1           1          Algeria  0.0  1.0  0.0   0.0   0.0   0.0  15.0    0.0   \n","2           2           Angola  0.0  0.0  0.0   0.0   0.0   0.0  12.0    0.0   \n","3           3            Benin  0.0  0.0  0.0   0.0   0.0   0.0  10.0    0.0   \n","4           4         Botswana  0.0  0.0  0.0   0.0   0.0   0.0   7.0    0.0   \n","\n","   H-1C  H-2A  H-2B  H-3  H-4  O-1  O-2  O-3  \n","0   NaN   NaN   NaN  NaN  NaN  NaN  NaN  NaN  \n","1   0.0   0.0   0.0  1.0  6.0  2.0  1.0  0.0  \n","2   0.0   0.0   0.0  8.0  5.0  0.0  0.0  0.0  \n","3   0.0   0.0   0.0  0.0  0.0  0.0  0.0  1.0  \n","4   0.0   0.0   0.0  0.0  2.0  0.0  0.0  0.0  "],"text/html":["\n","  <div id=\"df-acb4ed1f-fcc7-490d-92fe-f43c50cb9901\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Fiscal Year 2010</th>\n","      <th>E-1</th>\n","      <th>E-2</th>\n","      <th>E-3</th>\n","      <th>E-3D</th>\n","      <th>E-3R</th>\n","      <th>H-1A</th>\n","      <th>H-1B</th>\n","      <th>H-1B1</th>\n","      <th>H-1C</th>\n","      <th>H-2A</th>\n","      <th>H-2B</th>\n","      <th>H-3</th>\n","      <th>H-4</th>\n","      <th>O-1</th>\n","      <th>O-2</th>\n","      <th>O-3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Africa</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>Algeria</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>6.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>Angola</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>12.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>8.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>Benin</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>10.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>Botswana</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-acb4ed1f-fcc7-490d-92fe-f43c50cb9901')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-acb4ed1f-fcc7-490d-92fe-f43c50cb9901 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-acb4ed1f-fcc7-490d-92fe-f43c50cb9901');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e4025136-8f60-40db-8c09-e87116280b49\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4025136-8f60-40db-8c09-e87116280b49')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e4025136-8f60-40db-8c09-e87116280b49 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["def setTotal(region):\n","  if 'Totals for' in region:\n","    print(region.strip()[len('Totals for'):].strip())\n","    return region.strip()[len('Totals for'):].strip()\n","\n","  return region\n","\n","years = list(range(10, 21))\n","for year in years:\n","  print('20' + str(year) + '*'*50)\n","  niv_data_path = './data/niv_data/niv_FY' + str(year) + '.csv'\n","  niv = pd.read_csv(niv_data_path)\n","  niv = niv.drop(['Unnamed: 0'], axis = 1)\n","  print(niv.shape)\n","  niv = niv.dropna()\n","  print(niv.shape)\n","  niv['region'] = niv.apply(lambda x: setTotal(x['Fiscal Year 20' + str(year)]), axis = 1)\n","\n","  output_path = './data/final_cleaned/niv_FY20' + str(year) + '.csv'\n","  niv.to_csv(output_path, index = False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L4QfPNxCO6tM","executionInfo":{"status":"ok","timestamp":1699569872050,"user_tz":360,"elapsed":3671,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"5aa39bfd-f961-4d09-8349-f88abd1fd815"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2010**************************************************\n","(228, 17)\n","(208, 17)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2011**************************************************\n","(229, 18)\n","(209, 18)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2012**************************************************\n","(229, 18)\n","(209, 18)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2013**************************************************\n","(228, 18)\n","(208, 18)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2014**************************************************\n","(228, 17)\n","(208, 17)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2015**************************************************\n","(228, 17)\n","(208, 17)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2016**************************************************\n","(228, 17)\n","(208, 17)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2017**************************************************\n","(228, 17)\n","(208, 17)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2018**************************************************\n","(228, 17)\n","(208, 17)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2019**************************************************\n","(228, 17)\n","(208, 17)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n","2020**************************************************\n","(228, 17)\n","(207, 17)\n","Africa\n","Asia\n","Europe\n","North America\n","Oceania\n","South America\n","Unknown\n"]}]},{"cell_type":"markdown","source":["## GDP Data"],"metadata":{"id":"6yegc-RxQ4Rp"}},{"cell_type":"code","source":["!ls data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7zmAJ7KzfTTd","executionInfo":{"status":"ok","timestamp":1699573840690,"user_tz":360,"elapsed":427,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"6f75a4bf-b954-4dec-857e-496388702557"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" cpsaat11.xlsx\t\t\t\t   GrossOutput-2010_2022.csv.gsheet\n"," Current_Employment_Statistics__CES_.csv   lca_data\n"," final_cleaned\t\t\t\t   niv_data\n"," FYs97-22_NIVDetailTable.xlsx\t\t  'Untitled spreadsheet.gsheet'\n"]}]},{"cell_type":"code","source":["gdp_path = './data/GrossOutput-2010_2020.csv'\n","gdp = pd.read_csv(gdp_path)\n","print(gdp.shape)\n","gdp.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"Z_SIXvS2Q5rk","executionInfo":{"status":"ok","timestamp":1699577448789,"user_tz":360,"elapsed":167,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"0aeae308-86f4-4775-b42b-39a8a16220f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(98, 13)\n"]},{"output_type":"execute_result","data":{"text/plain":["   Sl No                                         Sector        2010  \\\n","0      1                                 All industries  26,475,691   \n","1      2                             Private industries  23,139,673   \n","2      3    Agriculture, forestry, fishing, and hunting     366,578   \n","3      4                                          Farms     320,921   \n","4      5      Forestry, fishing, and related activities      45,657   \n","\n","         2011        2012        2013        2014        2015        2016  \\\n","0  28,045,894  29,222,821  30,350,112  31,756,413  32,183,068  32,855,063   \n","1  24,681,950  25,833,601  26,923,094  28,264,017  28,616,198  29,205,311   \n","2     429,493     451,069     486,245     497,416     456,433     432,253   \n","3     380,317     404,166     436,934     441,667     402,908     379,677   \n","4      49,176      46,902      49,312      55,750      53,526      52,575   \n","\n","         2017        2018        2019        2020  \n","0  34,392,092  36,489,532  37,709,701  36,561,975  \n","1  30,647,259  32,553,709  33,604,067  32,393,106  \n","2     452,386     451,330     439,022     447,779  \n","3     395,379     395,102     387,890     394,395  \n","4      57,006      56,228      51,132      53,384  "],"text/html":["\n","  <div id=\"df-e6662f46-5833-4684-b02b-058fd7c1a12e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sl No</th>\n","      <th>Sector</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","      <th>2013</th>\n","      <th>2014</th>\n","      <th>2015</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>2018</th>\n","      <th>2019</th>\n","      <th>2020</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>All industries</td>\n","      <td>26,475,691</td>\n","      <td>28,045,894</td>\n","      <td>29,222,821</td>\n","      <td>30,350,112</td>\n","      <td>31,756,413</td>\n","      <td>32,183,068</td>\n","      <td>32,855,063</td>\n","      <td>34,392,092</td>\n","      <td>36,489,532</td>\n","      <td>37,709,701</td>\n","      <td>36,561,975</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Private industries</td>\n","      <td>23,139,673</td>\n","      <td>24,681,950</td>\n","      <td>25,833,601</td>\n","      <td>26,923,094</td>\n","      <td>28,264,017</td>\n","      <td>28,616,198</td>\n","      <td>29,205,311</td>\n","      <td>30,647,259</td>\n","      <td>32,553,709</td>\n","      <td>33,604,067</td>\n","      <td>32,393,106</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Agriculture, forestry, fishing, and hunting</td>\n","      <td>366,578</td>\n","      <td>429,493</td>\n","      <td>451,069</td>\n","      <td>486,245</td>\n","      <td>497,416</td>\n","      <td>456,433</td>\n","      <td>432,253</td>\n","      <td>452,386</td>\n","      <td>451,330</td>\n","      <td>439,022</td>\n","      <td>447,779</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Farms</td>\n","      <td>320,921</td>\n","      <td>380,317</td>\n","      <td>404,166</td>\n","      <td>436,934</td>\n","      <td>441,667</td>\n","      <td>402,908</td>\n","      <td>379,677</td>\n","      <td>395,379</td>\n","      <td>395,102</td>\n","      <td>387,890</td>\n","      <td>394,395</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Forestry, fishing, and related activities</td>\n","      <td>45,657</td>\n","      <td>49,176</td>\n","      <td>46,902</td>\n","      <td>49,312</td>\n","      <td>55,750</td>\n","      <td>53,526</td>\n","      <td>52,575</td>\n","      <td>57,006</td>\n","      <td>56,228</td>\n","      <td>51,132</td>\n","      <td>53,384</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6662f46-5833-4684-b02b-058fd7c1a12e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e6662f46-5833-4684-b02b-058fd7c1a12e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e6662f46-5833-4684-b02b-058fd7c1a12e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bee31439-fc7c-4ab8-b4c8-c916c3e51568\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bee31439-fc7c-4ab8-b4c8-c916c3e51568')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bee31439-fc7c-4ab8-b4c8-c916c3e51568 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":221}]},{"cell_type":"code","source":["all_sectors = set(list(soc_code_dict.values()))\n","all_sectors.add('Other services, except government')\n","print(len(all_sectors), all_sectors)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9UO848rpRRTU","executionInfo":{"status":"ok","timestamp":1699577452023,"user_tz":360,"elapsed":131,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"5e5f28dc-fdea-452c-904a-5e9bfed00167"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15 {'Utilities', 'Manufacturing', 'Government', 'Finance, insurance, real estate, rental, and leasing', 'Agriculture, forestry, fishing, and hunting', 'Transportation and Warehousing', 'Real estate and rental and leasing', 'Other services, except government', 'Information', 'Construction', 'Arts, entertainment, recreation, accommodation, and food services', 'Professional and business services', 'Educational services, health care, and social assistance', 'Mining', 'Wholesale and Retail Trade'}\n"]}]},{"cell_type":"code","source":["cnt = 0\n","for idx, row in gdp.iterrows():\n","  if row['Sector'].strip() in all_sectors:\n","    print(row['Sector'].strip())\n","    cnt += 1\n","print(cnt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tuPtUd4CcaL5","executionInfo":{"status":"ok","timestamp":1699577452990,"user_tz":360,"elapsed":176,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"46e69dad-2e77-43b0-9553-2bb99438db17"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Agriculture, forestry, fishing, and hunting\n","Mining\n","Utilities\n","Construction\n","Manufacturing\n","Transportation and Warehousing\n","Information\n","Finance, insurance, real estate, rental, and leasing\n","Real estate and rental and leasing\n","Professional and business services\n","Educational services, health care, and social assistance\n","Arts, entertainment, recreation, accommodation, and food services\n","Other services, except government\n","Government\n","Wholesale and Retail Trade\n","15\n"]}]},{"cell_type":"code","source":["gdp['Sector'] = gdp.apply(lambda x: x['Sector'].strip(), axis = 1)\n","gdp.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"HJlpWyv4lTxg","executionInfo":{"status":"ok","timestamp":1699577455044,"user_tz":360,"elapsed":226,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"c13faf31-b158-4c36-e62c-18f161bc1906"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Sl No                                       Sector        2010        2011  \\\n","0      1                               All industries  26,475,691  28,045,894   \n","1      2                           Private industries  23,139,673  24,681,950   \n","2      3  Agriculture, forestry, fishing, and hunting     366,578     429,493   \n","3      4                                        Farms     320,921     380,317   \n","4      5    Forestry, fishing, and related activities      45,657      49,176   \n","\n","         2012        2013        2014        2015        2016        2017  \\\n","0  29,222,821  30,350,112  31,756,413  32,183,068  32,855,063  34,392,092   \n","1  25,833,601  26,923,094  28,264,017  28,616,198  29,205,311  30,647,259   \n","2     451,069     486,245     497,416     456,433     432,253     452,386   \n","3     404,166     436,934     441,667     402,908     379,677     395,379   \n","4      46,902      49,312      55,750      53,526      52,575      57,006   \n","\n","         2018        2019        2020  \n","0  36,489,532  37,709,701  36,561,975  \n","1  32,553,709  33,604,067  32,393,106  \n","2     451,330     439,022     447,779  \n","3     395,102     387,890     394,395  \n","4      56,228      51,132      53,384  "],"text/html":["\n","  <div id=\"df-2a522295-93a5-4c94-9bd6-61169a636335\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sl No</th>\n","      <th>Sector</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","      <th>2013</th>\n","      <th>2014</th>\n","      <th>2015</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>2018</th>\n","      <th>2019</th>\n","      <th>2020</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>All industries</td>\n","      <td>26,475,691</td>\n","      <td>28,045,894</td>\n","      <td>29,222,821</td>\n","      <td>30,350,112</td>\n","      <td>31,756,413</td>\n","      <td>32,183,068</td>\n","      <td>32,855,063</td>\n","      <td>34,392,092</td>\n","      <td>36,489,532</td>\n","      <td>37,709,701</td>\n","      <td>36,561,975</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Private industries</td>\n","      <td>23,139,673</td>\n","      <td>24,681,950</td>\n","      <td>25,833,601</td>\n","      <td>26,923,094</td>\n","      <td>28,264,017</td>\n","      <td>28,616,198</td>\n","      <td>29,205,311</td>\n","      <td>30,647,259</td>\n","      <td>32,553,709</td>\n","      <td>33,604,067</td>\n","      <td>32,393,106</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Agriculture, forestry, fishing, and hunting</td>\n","      <td>366,578</td>\n","      <td>429,493</td>\n","      <td>451,069</td>\n","      <td>486,245</td>\n","      <td>497,416</td>\n","      <td>456,433</td>\n","      <td>432,253</td>\n","      <td>452,386</td>\n","      <td>451,330</td>\n","      <td>439,022</td>\n","      <td>447,779</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Farms</td>\n","      <td>320,921</td>\n","      <td>380,317</td>\n","      <td>404,166</td>\n","      <td>436,934</td>\n","      <td>441,667</td>\n","      <td>402,908</td>\n","      <td>379,677</td>\n","      <td>395,379</td>\n","      <td>395,102</td>\n","      <td>387,890</td>\n","      <td>394,395</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Forestry, fishing, and related activities</td>\n","      <td>45,657</td>\n","      <td>49,176</td>\n","      <td>46,902</td>\n","      <td>49,312</td>\n","      <td>55,750</td>\n","      <td>53,526</td>\n","      <td>52,575</td>\n","      <td>57,006</td>\n","      <td>56,228</td>\n","      <td>51,132</td>\n","      <td>53,384</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a522295-93a5-4c94-9bd6-61169a636335')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2a522295-93a5-4c94-9bd6-61169a636335 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2a522295-93a5-4c94-9bd6-61169a636335');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ef888126-bf0a-4391-ad39-d97edbfff71b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef888126-bf0a-4391-ad39-d97edbfff71b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ef888126-bf0a-4391-ad39-d97edbfff71b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":224}]},{"cell_type":"code","source":["gdp_filtered = gdp[gdp['Sector'].isin(all_sectors)]\n","gdp_filtered.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"5dIOPpLHk_0e","executionInfo":{"status":"ok","timestamp":1699577458812,"user_tz":360,"elapsed":133,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"fa3ab4e9-8e69-4e16-975a-a5b0aba20f63"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Sl No                                       Sector       2010       2011  \\\n","2       3  Agriculture, forestry, fishing, and hunting    366,578    429,493   \n","5       6                                       Mining    500,091    601,786   \n","9      10                                    Utilities    494,486    484,889   \n","10     11                                 Construction  1,016,651  1,020,485   \n","11     12                                Manufacturing  5,018,845  5,594,612   \n","\n","         2012       2013       2014       2015       2016       2017  \\\n","2     451,069    486,245    497,416    456,433    432,253    452,386   \n","5     613,485    663,437    745,990    495,972    388,411    498,345   \n","9     461,485    491,663    537,642    513,760    498,637    511,269   \n","10  1,074,580  1,155,700  1,258,772  1,386,108  1,495,152  1,570,262   \n","11  5,772,675  5,940,231  6,026,005  5,703,472  5,543,006  5,733,480   \n","\n","         2018       2019       2020  \n","2     451,330    439,022    447,779  \n","5     627,175    594,814    416,323  \n","9     557,498    558,824    530,634  \n","10  1,647,954  1,722,906  1,795,933  \n","11  6,117,725  6,055,431  5,501,239  "],"text/html":["\n","  <div id=\"df-9247e6d5-6822-40eb-a959-17428709cd8a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sl No</th>\n","      <th>Sector</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","      <th>2013</th>\n","      <th>2014</th>\n","      <th>2015</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>2018</th>\n","      <th>2019</th>\n","      <th>2020</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Agriculture, forestry, fishing, and hunting</td>\n","      <td>366,578</td>\n","      <td>429,493</td>\n","      <td>451,069</td>\n","      <td>486,245</td>\n","      <td>497,416</td>\n","      <td>456,433</td>\n","      <td>432,253</td>\n","      <td>452,386</td>\n","      <td>451,330</td>\n","      <td>439,022</td>\n","      <td>447,779</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>Mining</td>\n","      <td>500,091</td>\n","      <td>601,786</td>\n","      <td>613,485</td>\n","      <td>663,437</td>\n","      <td>745,990</td>\n","      <td>495,972</td>\n","      <td>388,411</td>\n","      <td>498,345</td>\n","      <td>627,175</td>\n","      <td>594,814</td>\n","      <td>416,323</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10</td>\n","      <td>Utilities</td>\n","      <td>494,486</td>\n","      <td>484,889</td>\n","      <td>461,485</td>\n","      <td>491,663</td>\n","      <td>537,642</td>\n","      <td>513,760</td>\n","      <td>498,637</td>\n","      <td>511,269</td>\n","      <td>557,498</td>\n","      <td>558,824</td>\n","      <td>530,634</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>11</td>\n","      <td>Construction</td>\n","      <td>1,016,651</td>\n","      <td>1,020,485</td>\n","      <td>1,074,580</td>\n","      <td>1,155,700</td>\n","      <td>1,258,772</td>\n","      <td>1,386,108</td>\n","      <td>1,495,152</td>\n","      <td>1,570,262</td>\n","      <td>1,647,954</td>\n","      <td>1,722,906</td>\n","      <td>1,795,933</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>12</td>\n","      <td>Manufacturing</td>\n","      <td>5,018,845</td>\n","      <td>5,594,612</td>\n","      <td>5,772,675</td>\n","      <td>5,940,231</td>\n","      <td>6,026,005</td>\n","      <td>5,703,472</td>\n","      <td>5,543,006</td>\n","      <td>5,733,480</td>\n","      <td>6,117,725</td>\n","      <td>6,055,431</td>\n","      <td>5,501,239</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9247e6d5-6822-40eb-a959-17428709cd8a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9247e6d5-6822-40eb-a959-17428709cd8a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9247e6d5-6822-40eb-a959-17428709cd8a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fa9676f9-5c22-495b-b168-1329e50cd1c1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa9676f9-5c22-495b-b168-1329e50cd1c1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fa9676f9-5c22-495b-b168-1329e50cd1c1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":225}]},{"cell_type":"code","source":["columns_to_change = list(gdp.columns)[2:]\n","print(columns_to_change)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EuMr-XMOsmsD","executionInfo":{"status":"ok","timestamp":1699577502608,"user_tz":360,"elapsed":144,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"67d9c5e6-1755-4756-e867-1f40d4a46584"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020']\n"]}]},{"cell_type":"code","source":["for column in columns_to_change:\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZM5bII3Krtia","executionInfo":{"status":"ok","timestamp":1699577504483,"user_tz":360,"elapsed":248,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"02f10fba-4b3f-4fa8-bfd0-10802f19d757"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n","<ipython-input-229-75d070d1bb8f>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  gdp_filtered[column] = gdp_filtered.apply(lambda x: float(''.join(x[column].split(','))), axis = 1)\n"]}]},{"cell_type":"code","source":["gdp_filtered.to_csv('./data/final_cleaned/gdp_2010_2020.csv', index = False)"],"metadata":{"id":"8flQWAVjs6r8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Plots"],"metadata":{"id":"hr79aI_PtHNr"}},{"cell_type":"code","source":["### all sector gdp line graph\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd"],"metadata":{"id":"GCQkaJjcmahU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["gdp_path = './data/final_cleaned/gdp_2010_2020.csv'\n","gdp = pd.read_csv(gdp_path)\n","gdp.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"1z1DltoHtJJ_","executionInfo":{"status":"ok","timestamp":1699577596446,"user_tz":360,"elapsed":416,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"e6792ccf-50a3-4d69-e1ab-a0abd8e5e273"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                        Sector     2010     2011     2012  \\\n","0  Agriculture, forestry, fishing, and hunting   366578   429493   451069   \n","1                                       Mining   500091   601786   613485   \n","2                                    Utilities   494486   484889   461485   \n","3                                 Construction  1016651  1020485  1074580   \n","4                                Manufacturing  5018845  5594612  5772675   \n","\n","      2013     2014     2015     2016     2017     2018     2019     2020  \n","0   486245   497416   456433   432253   452386   451330   439022   447779  \n","1   663437   745990   495972   388411   498345   627175   594814   416323  \n","2   491663   537642   513760   498637   511269   557498   558824   530634  \n","3  1155700  1258772  1386108  1495152  1570262  1647954  1722906  1795933  \n","4  5940231  6026005  5703472  5543006  5733480  6117725  6055431  5501239  "],"text/html":["\n","  <div id=\"df-6c19e172-03b3-4274-8eaf-5aa73405a51c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sector</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","      <th>2013</th>\n","      <th>2014</th>\n","      <th>2015</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>2018</th>\n","      <th>2019</th>\n","      <th>2020</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Agriculture, forestry, fishing, and hunting</td>\n","      <td>366578</td>\n","      <td>429493</td>\n","      <td>451069</td>\n","      <td>486245</td>\n","      <td>497416</td>\n","      <td>456433</td>\n","      <td>432253</td>\n","      <td>452386</td>\n","      <td>451330</td>\n","      <td>439022</td>\n","      <td>447779</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Mining</td>\n","      <td>500091</td>\n","      <td>601786</td>\n","      <td>613485</td>\n","      <td>663437</td>\n","      <td>745990</td>\n","      <td>495972</td>\n","      <td>388411</td>\n","      <td>498345</td>\n","      <td>627175</td>\n","      <td>594814</td>\n","      <td>416323</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Utilities</td>\n","      <td>494486</td>\n","      <td>484889</td>\n","      <td>461485</td>\n","      <td>491663</td>\n","      <td>537642</td>\n","      <td>513760</td>\n","      <td>498637</td>\n","      <td>511269</td>\n","      <td>557498</td>\n","      <td>558824</td>\n","      <td>530634</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Construction</td>\n","      <td>1016651</td>\n","      <td>1020485</td>\n","      <td>1074580</td>\n","      <td>1155700</td>\n","      <td>1258772</td>\n","      <td>1386108</td>\n","      <td>1495152</td>\n","      <td>1570262</td>\n","      <td>1647954</td>\n","      <td>1722906</td>\n","      <td>1795933</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Manufacturing</td>\n","      <td>5018845</td>\n","      <td>5594612</td>\n","      <td>5772675</td>\n","      <td>5940231</td>\n","      <td>6026005</td>\n","      <td>5703472</td>\n","      <td>5543006</td>\n","      <td>5733480</td>\n","      <td>6117725</td>\n","      <td>6055431</td>\n","      <td>5501239</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c19e172-03b3-4274-8eaf-5aa73405a51c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c19e172-03b3-4274-8eaf-5aa73405a51c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c19e172-03b3-4274-8eaf-5aa73405a51c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-67b6860a-cbdd-4d3e-a50a-9d261bb5330c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67b6860a-cbdd-4d3e-a50a-9d261bb5330c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-67b6860a-cbdd-4d3e-a50a-9d261bb5330c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":233}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"lNt8H-OVqPmQ","executionInfo":{"status":"ok","timestamp":1699576644776,"user_tz":360,"elapsed":315,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"8ec84407-8dec-4caa-8d3e-cd2f4aea597c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'388,411'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":198}]},{"cell_type":"code","source":["# Separate the DataFrame into groups based on the 'Category' column\n","gdp_filtered = gdp[gdp['Sector'].isin(['Mining', 'Construction', 'Information', 'Professional and business services'])]\n","grouped_df = gdp_filtered.groupby('Sector')\n","\n","# Create a multiline plot\n","fig, ax = plt.subplots()\n","\n","fig.set_size_inches(10, 10.5)\n","\n","for category, group in grouped_df:\n","    ax.plot(group.drop('Sector', axis=1).columns, group.drop('Sector', axis=1).iloc[0], label=category)\n","\n","# Set labels and title\n","ax.set_xlabel('Year')\n","ax.set_ylabel('USD (In Millions)')\n","ax.set_title('GDP trend for Sectors')\n","\n","# Add a legend\n","ax.legend()\n","\n","# Show the plot\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":911},"id":"pDo35xmanZW9","executionInfo":{"status":"ok","timestamp":1699578073217,"user_tz":360,"elapsed":497,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"f5e1984c-84ca-4593-a736-e17c7ab61b72"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1050 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["niv_data_path = './data/final_cleaned/niv_FY2010.csv'\n","niv = pd.read_csv(niv_data_path)\n","niv.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"rQUD5nSdoUxi","executionInfo":{"status":"ok","timestamp":1699586494861,"user_tz":360,"elapsed":1225,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"55d43ff5-513d-4a68-8f15-657837e40e66"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Fiscal Year 2010  E-1  E-2  E-3  E-3D  E-3R  H-1A  H-1B  H-1B1  H-1C  H-2A  \\\n","0          Algeria  0.0  1.0  0.0   0.0   0.0   0.0  15.0    0.0   0.0   0.0   \n","1           Angola  0.0  0.0  0.0   0.0   0.0   0.0  12.0    0.0   0.0   0.0   \n","2            Benin  0.0  0.0  0.0   0.0   0.0   0.0  10.0    0.0   0.0   0.0   \n","3         Botswana  0.0  0.0  0.0   0.0   0.0   0.0   7.0    0.0   0.0   0.0   \n","4     Burkina Faso  1.0  0.0  0.0   0.0   0.0   0.0  15.0    0.0   0.0   0.0   \n","\n","   H-2B  H-3  H-4  O-1  O-2  O-3        region  \n","0   0.0  1.0  6.0  2.0  1.0  0.0       Algeria  \n","1   0.0  8.0  5.0  0.0  0.0  0.0        Angola  \n","2   0.0  0.0  0.0  0.0  0.0  1.0         Benin  \n","3   0.0  0.0  2.0  0.0  0.0  0.0      Botswana  \n","4   0.0  0.0  5.0  2.0  4.0  0.0  Burkina Faso  "],"text/html":["\n","  <div id=\"df-6430c7f0-c945-47af-bc27-4066a540c4d7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Fiscal Year 2010</th>\n","      <th>E-1</th>\n","      <th>E-2</th>\n","      <th>E-3</th>\n","      <th>E-3D</th>\n","      <th>E-3R</th>\n","      <th>H-1A</th>\n","      <th>H-1B</th>\n","      <th>H-1B1</th>\n","      <th>H-1C</th>\n","      <th>H-2A</th>\n","      <th>H-2B</th>\n","      <th>H-3</th>\n","      <th>H-4</th>\n","      <th>O-1</th>\n","      <th>O-2</th>\n","      <th>O-3</th>\n","      <th>region</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Algeria</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>6.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>Algeria</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Angola</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>12.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>8.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>Angola</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Benin</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>10.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>Benin</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Botswana</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>Botswana</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Burkina Faso</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>Burkina Faso</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6430c7f0-c945-47af-bc27-4066a540c4d7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6430c7f0-c945-47af-bc27-4066a540c4d7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6430c7f0-c945-47af-bc27-4066a540c4d7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c5f524b9-b422-4473-84c6-38d177662a85\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c5f524b9-b422-4473-84c6-38d177662a85')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c5f524b9-b422-4473-84c6-38d177662a85 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["h1b_data_path = './data/final_cleaned/h1b_FY2010.csv'\n","h1b = pd.read_csv(h1b_data_path)\n","h1b.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"N9Bbi3xjP8vr","executionInfo":{"status":"ok","timestamp":1699588050479,"user_tz":360,"elapsed":515,"user":{"displayName":"Millennium Bismay","userId":"09399669580417612253"}},"outputId":"056bb2e2-59ac-4ebe-d882-c102eb2505af"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        State  Visa                                             Sector  \\\n","0  15-1051.00  H-1B                 Professional and business services   \n","1  15-1071.00  H-1B                 Professional and business services   \n","2  13-1072.00  H-1B                 Professional and business services   \n","3  13-1199.99  H-1B                 Professional and business services   \n","4  15-2041.00  H-1B                 Professional and business services   \n","5  15-1031.00  H-1B                 Professional and business services   \n","6  19-1021.00  H-1B                 Professional and business services   \n","7  25-1054.00  H-1B  Educational services, health care, and social ...   \n","8  27-1024.00  H-1B  Arts, entertainment, recreation, accommodation...   \n","9  29-9099.99  H-1B  Educational services, health care, and social ...   \n","\n","       Wage  \n","0   82300.0  \n","1   56056.0  \n","2   46259.2  \n","3   44408.0  \n","4   55453.0  \n","5  108181.0  \n","6   34154.0  \n","7   45070.0  \n","8   45365.0  \n","9   47902.0  "],"text/html":["\n","  <div id=\"df-fb6679b9-6b1a-41f8-b1e8-3061c3b24cd7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>State</th>\n","      <th>Visa</th>\n","      <th>Sector</th>\n","      <th>Wage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15-1051.00</td>\n","      <td>H-1B</td>\n","      <td>Professional and business services</td>\n","      <td>82300.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15-1071.00</td>\n","      <td>H-1B</td>\n","      <td>Professional and business services</td>\n","      <td>56056.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>13-1072.00</td>\n","      <td>H-1B</td>\n","      <td>Professional and business services</td>\n","      <td>46259.2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13-1199.99</td>\n","      <td>H-1B</td>\n","      <td>Professional and business services</td>\n","      <td>44408.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15-2041.00</td>\n","      <td>H-1B</td>\n","      <td>Professional and business services</td>\n","      <td>55453.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>15-1031.00</td>\n","      <td>H-1B</td>\n","      <td>Professional and business services</td>\n","      <td>108181.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>19-1021.00</td>\n","      <td>H-1B</td>\n","      <td>Professional and business services</td>\n","      <td>34154.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>25-1054.00</td>\n","      <td>H-1B</td>\n","      <td>Educational services, health care, and social ...</td>\n","      <td>45070.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>27-1024.00</td>\n","      <td>H-1B</td>\n","      <td>Arts, entertainment, recreation, accommodation...</td>\n","      <td>45365.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>29-9099.99</td>\n","      <td>H-1B</td>\n","      <td>Educational services, health care, and social ...</td>\n","      <td>47902.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb6679b9-6b1a-41f8-b1e8-3061c3b24cd7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fb6679b9-6b1a-41f8-b1e8-3061c3b24cd7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fb6679b9-6b1a-41f8-b1e8-3061c3b24cd7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e8684238-7505-4813-aa13-352425214801\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8684238-7505-4813-aa13-352425214801')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e8684238-7505-4813-aa13-352425214801 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":[],"metadata":{"id":"wy0fhv9RV2pW"},"execution_count":null,"outputs":[]}]}